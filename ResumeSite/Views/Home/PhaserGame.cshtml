<head>
	<script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js"></script>
</head>


<div id="phaser-game">
	<script type="text/javascript">

		var config = {
			type: Phaser.AUTO,
			width: 800,
			height: 600,

			physics:
			{
				default: 'arcade',
				arcade: { y: 300 },
				debug: false
			},

			parent: 'phaser-game',
			scene: {
				preload: preload,
				create: create,
				update: update
			}
		};



		var platforms;
		var player;
		var stars;
		var score = 0;
		var scoreText;
		var gameOver = false;

		var game = new Phaser.Game(config);

		function preload() {
			//for Chrome, must put the slash before the folder directory
			//or else it's not gonna work for ya bud

			this.load.image('sky', '/assets/sky.png');
			this.load.image('ground', '/assets/platform.png');
			this.load.image('star', '/assets/star.png');
			this.load.image('bomb', '/assets/bomb.png');
			this.load.spritesheet('dude',
				'/assets/dude.png',
				{ frameWidth: 32, frameHeight: 48 }
			);
		}

		function create() {
			//Background must come first as things stack when loaded

			/*CREATE PLATFORM START*/
			this.add.image(400, 300, 'sky');

			platforms = this.physics.add.staticGroup();

			platforms.create(400, 568, 'ground').setScale(2).refreshBody();

			platforms.create(600, 400, 'ground');
			platforms.create(50, 250, 'ground');
			platforms.create(750, 220, 'ground');
			/*CREATE PLATFORM END*/

			/******CREATE PLAYER START******/
			//dynamic physics body by default, not static
			player = this.physics.add.sprite(100, 450, 'dude');

			player.setBounce(0.2);

			//keeps the player object from going off screen
			player.setCollideWorldBounds(true);
			player.body.setGravityY(300);
			/******CREATE PLAYER END******/


			/*START ADD ANIMATIONS*/
			this.anims.create({
				key: 'left',
				frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
				frameRate: 10,
				//negative 1 repeat sets the animation to loop between
				//indeces 0 and 3, forming a running animation
				repeat: -1
			});

			this.anims.create({
				key: 'turn',
				frames: [{ key: 'dude', frame: 4 }],
				frameRate: 20
			});

			this.anims.create({
				key: 'right',
				frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
				frameRate: 10,
				repeat: -1
			});
			/******END ADD ANIMATIONS******/

			/******START ADD STARS******/
			stars = this.physics.add.group({
				key: 'star',
				repeat: 11,

				setXY: { x: 12, y: 0, stepX: 70 }
			});

			stars.children.iterate(function (child) {

				child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
				child.setGravityY(300);

			});


			/******END ADD STARS******/

			/*START ADD COLLIDERS*/
			this.physics.add.collider(player, platforms);
			this.physics.add.collider(stars, platforms);

			this.physics.add.overlap(player, stars, collectStar, null, this);

			this.physics.world.setBounds(0, 0, 800, 600, true, true, true, true);
			/*END ADD COLLIDERS*/


			scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

			bombs = this.physics.add.group();

			this.physics.add.collider(bombs, platforms);

			this.physics.add.collider(player, bombs, hitBomb, null, this);


		}

		function hitBomb(player, bomb)
		{
			this.physics.pause();

			player.setTint(0xff0000);

			player.anims.play('turn');

			gameOver = true;
		}


		function update()
		{
			cursors = this.input.keyboard.createCursorKeys();


			if (cursors.left.isDown) {
				player.setVelocityX(-160);

				player.anims.play('left', true);
			}
			else if (cursors.right.isDown) {
				player.setVelocityX(160);

				player.anims.play('right', true);
			}
			else {
				player.setVelocityX(0);

				player.anims.play('turn');
			}

			if (cursors.up.isDown && player.body.touching.down) {
				player.setVelocityY(-330);
			}
		}

		function collectStar(player, star)
		{
			star.disableBody(true, true);

			score += 10;
			scoreText.setText('Score: ' + score);


			if (stars.countActive(true) === 0)
			{
				restart();


			}
		}

		function restart()
		{
			stars.children.iterate(function (child) {

				child.enableBody(true, child.x, 0, true, true);

			});

			var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);

			var bomb = bombs.create(x, 16, 'bomb');
			bomb.setBounce(1);
			bomb.setCollideWorldBounds(true);
			bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
		}

	</script>
</div>

